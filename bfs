from queue import PriorityQueue
v = int(input("Enter no of vertices:"))
graph = [[] for i in range(v)]
def best_first_search(actual_Src, target, n):
	visited = [False] * n
	pq = PriorityQueue()
	pq.put(0, actual_Src)
	visited[actual_Src] = True
	while pq.empty() == False:
		u = pq.get()[1]
		pq = PriorityQueue()
		print(u, end=" ")
		if u == target:
			break
		for v, c in graph[u]:
			if visited[v] == False:
				visited[v] = True
				pq.put((c, v))
	print()
def addedge(x, y, cost):
	graph[x].append((y, cost))
	graph[y].append((x, cost))
e=int(input("Enter no of edges:"))
s,c=map(int,input("Enter root and it h(n):").split())
addedge(s,s,c)
print("Enter remaining edges and heuristic values:")
for i in range(e-1):
  s,d,c=map(int,input().split())
  addedge(s,d,c)
source = int(input("Enter the source vertex to start:"))
target = int(input("Enter the target vertex to reach:"))
best_first_search(source, target, v)
