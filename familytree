from collections import defaultdict
class Solution:
   def __init__(self, head_name):
      self.family = defaultdict(list)
      self.head = head_name
      self.dead = set()
   def birth(self, p_name, c_name):
      self.family[p_name].append(c_name)
   def death(self, name):
      self.dead.add(name)
   def inheritance(self):
      self.ans = []
      self.depth_search(self.head)
      return self.ans
   def depth_search(self, current):
      if current not in self.dead:
         self.ans.append(current)
      for child in self.family[current]:
         self.depth_search(child)
print("Enter head of the family name:")
n=input()
ob = Solution(n)
ch=input("Do you want stop here?")
while ch=='n':
    print("1.birth\n2.death\n3.display")
    c=int(input())
    if c==1:
      p=input("Enter parent name:")
      c=input("Enter child name:")
      ob.birth(p,c)
    elif c==2:
      p=input("Enter deceased name:")
      ob.death(p)
    elif c==3:
      print(ob.inheritance())
    else:
      print("invalid choice!")
    ch=input("Do you want stop here?")
